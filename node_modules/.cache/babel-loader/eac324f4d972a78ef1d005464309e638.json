{"ast":null,"code":"import _toConsumableArray from \"C:/Users/rahil/Desktop/dahsboardomar/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/rahil/Desktop/dahsboardomar/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector, gridDensityHeaderGroupingMaxDepthSelector, gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { GridColumnGroupHeader } from '../../../components/columnHeaders/GridColumnGroupHeader';\nimport { isDeepEqual } from '../../../utils/utils'; // TODO: add the possibility to switch this value if needed for customization\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar MERGE_EMPTY_CELLS = true;\nvar GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.columnHeaderRow;\n  }\n})(function () {\n  return {\n    display: 'flex'\n  };\n});\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport var useGridColumnHeaders = function useGridColumnHeaders(props) {\n  var innerRefProp = props.innerRef,\n      _props$minColumnIndex = props.minColumnIndex,\n      minColumnIndex = _props$minColumnIndex === void 0 ? 0 : _props$minColumnIndex;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragCol = _React$useState2[0],\n      setDragCol = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      resizeCol = _React$useState4[0],\n      setResizeCol = _React$useState4[1];\n\n  var apiRef = useGridApiContext();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  var cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  var headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  var headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);\n  var totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  var filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  var sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  var columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  var rootProps = useGridRootProps();\n  var innerRef = React.useRef(null);\n  var handleInnerRef = useForkRef(innerRefProp, innerRef);\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      renderContext = _React$useState6[0],\n      setRenderContext = _React$useState6[1];\n\n  var prevRenderContext = React.useRef(renderContext);\n  var prevScrollLeft = React.useRef(0);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(function () {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  var getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: function equalityCheck(a, b) {\n      return ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(function (key) {\n        return a[key] === b[key];\n      });\n    }\n  }));\n  var updateInnerPosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    }),\n        _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n        firstRowToRender = _getRenderableIndexes2[0],\n        lastRowToRender = _getRenderableIndexes2[1];\n\n    var firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      apiRef: apiRef,\n      visibleRows: currentPage.rows\n    });\n    var offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = \"translate3d(\".concat(-offset, \"px, 0px, 0px)\");\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(function () {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  var handleScroll = React.useCallback(function (_ref, event) {\n    var left = _ref.left,\n        _ref$renderContext = _ref.renderContext,\n        nextRenderContext = _ref$renderContext === void 0 ? null : _ref$renderContext;\n\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    var canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(function () {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  var handleColumnResizeStart = React.useCallback(function (params) {\n    return setResizeCol(params.field);\n  }, []);\n  var handleColumnResizeStop = React.useCallback(function () {\n    return setResizeCol('');\n  }, []);\n  var handleColumnReorderStart = React.useCallback(function (params) {\n    return setDragCol(params.field);\n  }, []);\n  var handleColumnReorderStop = React.useCallback(function () {\n    return setDragCol('');\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll); // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n\n  var getColumnsToRender = function getColumnsToRender(params) {\n    var _ref2 = params || {},\n        _ref2$renderContext = _ref2.renderContext,\n        nextRenderContext = _ref2$renderContext === void 0 ? renderContext : _ref2$renderContext,\n        _ref2$minFirstColumn = _ref2.minFirstColumn,\n        minFirstColumn = _ref2$minFirstColumn === void 0 ? minColumnIndex : _ref2$minFirstColumn,\n        _ref2$maxLastColumn = _ref2.maxLastColumn,\n        maxLastColumn = _ref2$maxLastColumn === void 0 ? visibleColumns.length : _ref2$maxLastColumn;\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    var _getRenderableIndexes3 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    }),\n        _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n        firstRowToRender = _getRenderableIndexes4[0],\n        lastRowToRender = _getRenderableIndexes4[1];\n\n    var firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns: renderedColumns,\n      firstColumnToRender: firstColumnToRender,\n      lastColumnToRender: lastColumnToRender,\n      minFirstColumn: minFirstColumn,\n      maxLastColumn: maxLastColumn\n    };\n  };\n\n  var getColumnHeaders = function getColumnHeaders(params) {\n    var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var columnsToRender = getColumnsToRender(params);\n\n    if (columnsToRender == null) {\n      return null;\n    }\n\n    var renderedColumns = columnsToRender.renderedColumns,\n        firstColumnToRender = columnsToRender.firstColumnToRender;\n    var columns = [];\n\n    for (var i = 0; i < renderedColumns.length; i += 1) {\n      var column = renderedColumns[i];\n      var columnIndex = firstColumnToRender + i;\n      var isFirstColumn = columnIndex === 0;\n      var hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      var tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      var hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      var open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      children: columns\n    });\n  };\n\n  var getParents = function getParents() {\n    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var depth = arguments.length > 1 ? arguments[1] : undefined;\n    return path.slice(0, depth + 1);\n  };\n\n  var getColumnGroupHeaders = function getColumnGroupHeaders(params) {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n\n    var columnsToRender = getColumnsToRender(params);\n\n    if (columnsToRender == null) {\n      return null;\n    }\n\n    var renderedColumns = columnsToRender.renderedColumns,\n        firstColumnToRender = columnsToRender.firstColumnToRender,\n        lastColumnToRender = columnsToRender.lastColumnToRender,\n        maxLastColumn = columnsToRender.maxLastColumn;\n    var columns = [];\n    var headerToRender = [];\n\n    var _loop = function _loop(depth) {\n      // Initialize the header line with a grouping item containing all the columns on the left of the virtualization which are in the same group as the first group to render\n      var initialHeader = [];\n      var leftOverflow = 0;\n      var columnIndex = firstColumnToRender - 1;\n      var firstColumnToRenderGroup = (_visibleColumns$first = visibleColumns[firstColumnToRender]) == null ? void 0 : (_visibleColumns$first2 = _visibleColumns$first.groupPath) == null ? void 0 : _visibleColumns$first2[depth]; // The array of parent is used to manage empty grouping cell\n      // When two empty grouping cell are next to each other, we merge them if the belong to the same group.\n\n      var firstColumnToRenderGroupParents = getParents((_visibleColumns$first3 = visibleColumns[firstColumnToRender]) == null ? void 0 : _visibleColumns$first3.groupPath, depth);\n\n      while (firstColumnToRenderGroup !== null && columnIndex >= minColumnIndex && (_visibleColumns$colum = visibleColumns[columnIndex]) != null && _visibleColumns$colum.groupPath && isDeepEqual(getParents((_visibleColumns$colum2 = visibleColumns[columnIndex]) == null ? void 0 : _visibleColumns$colum2.groupPath, depth), firstColumnToRenderGroupParents)) {\n        var column = visibleColumns[columnIndex];\n        leftOverflow += (_column$computedWidth = column.computedWidth) != null ? _column$computedWidth : 0;\n\n        if (initialHeader.length === 0) {\n          initialHeader.push({\n            width: (_column$computedWidth2 = column.computedWidth) != null ? _column$computedWidth2 : 0,\n            fields: [column.field],\n            groupId: firstColumnToRenderGroup,\n            groupParents: firstColumnToRenderGroupParents,\n            colIndex: columnIndex\n          });\n        } else {\n          initialHeader[0].width += (_column$computedWidth3 = column.computedWidth) != null ? _column$computedWidth3 : 0;\n          initialHeader[0].fields.push(column.field);\n          initialHeader[0].colIndex = columnIndex;\n        }\n\n        columnIndex -= 1;\n      }\n\n      var depthInfo = renderedColumns.reduce(function (aggregated, column, i) {\n        var _column$computedWidth7;\n\n        var lastItem = aggregated[aggregated.length - 1];\n\n        if (column.groupPath && column.groupPath.length > depth) {\n          var _column$computedWidth5;\n\n          if (lastItem && lastItem.groupId === column.groupPath[depth]) {\n            var _column$computedWidth4; // Merge with the previous columns\n\n\n            return [].concat(_toConsumableArray(aggregated.slice(0, aggregated.length - 1)), [_extends({}, lastItem, {\n              width: lastItem.width + ((_column$computedWidth4 = column.computedWidth) != null ? _column$computedWidth4 : 0),\n              fields: [].concat(_toConsumableArray(lastItem.fields), [column.field])\n            })]);\n          } // Create a new grouping\n\n\n          return [].concat(_toConsumableArray(aggregated), [{\n            groupId: column.groupPath[depth],\n            groupParents: getParents(column.groupPath, depth),\n            width: (_column$computedWidth5 = column.computedWidth) != null ? _column$computedWidth5 : 0,\n            fields: [column.field],\n            colIndex: firstColumnToRender + i\n          }]);\n        }\n\n        if (MERGE_EMPTY_CELLS && lastItem && lastItem.groupId === null && isDeepEqual(getParents(column.groupPath, depth), lastItem.groupParents)) {\n          var _column$computedWidth6; // We merge with previous column\n\n\n          return [].concat(_toConsumableArray(aggregated.slice(0, aggregated.length - 1)), [_extends({}, lastItem, {\n            width: lastItem.width + ((_column$computedWidth6 = column.computedWidth) != null ? _column$computedWidth6 : 0),\n            fields: [].concat(_toConsumableArray(lastItem.fields), [column.field])\n          })]);\n        } // We create new empty cell\n\n\n        return [].concat(_toConsumableArray(aggregated), [{\n          groupId: null,\n          groupParents: getParents(column.groupPath, depth),\n          width: (_column$computedWidth7 = column.computedWidth) != null ? _column$computedWidth7 : 0,\n          fields: [column.field],\n          colIndex: firstColumnToRender + i\n        }]);\n      }, initialHeader);\n      columnIndex = lastColumnToRender;\n      var lastColumnToRenderGroup = depthInfo[depthInfo.length - 1].groupId;\n\n      while (lastColumnToRenderGroup !== null && columnIndex < maxLastColumn && (_visibleColumns$colum3 = visibleColumns[columnIndex]) != null && _visibleColumns$colum3.groupPath && ((_visibleColumns$colum4 = visibleColumns[columnIndex]) == null ? void 0 : (_visibleColumns$colum5 = _visibleColumns$colum4.groupPath) == null ? void 0 : _visibleColumns$colum5[depth]) === lastColumnToRenderGroup) {\n        var _column = visibleColumns[columnIndex];\n        depthInfo[depthInfo.length - 1].width += (_column$computedWidth8 = _column.computedWidth) != null ? _column$computedWidth8 : 0;\n        depthInfo[depthInfo.length - 1].fields.push(_column.field);\n        columnIndex += 1;\n      }\n\n      headerToRender.push({\n        leftOverflow: leftOverflow,\n        elements: _toConsumableArray(depthInfo)\n      });\n    };\n\n    for (var depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      var _visibleColumns$first, _visibleColumns$first2, _visibleColumns$first3;\n\n      var _visibleColumns$colum, _visibleColumns$colum2, _column$computedWidth;\n\n      var _column$computedWidth2;\n\n      var _column$computedWidth3;\n\n      var _visibleColumns$colum3, _visibleColumns$colum4, _visibleColumns$colum5, _column$computedWidth8;\n\n      _loop(depth);\n    }\n\n    headerToRender.forEach(function (depthInfo, depthIndex) {\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n        style: {\n          height: \"\".concat(headerHeight, \"px\"),\n          transform: \"translateX(-\".concat(depthInfo.leftOverflow, \"px)\")\n        },\n        role: \"row\",\n        \"aria-rowindex\": depthIndex + 1,\n        children: depthInfo.elements.map(function (_ref3, groupIndex) {\n          var groupId = _ref3.groupId,\n              width = _ref3.width,\n              fields = _ref3.fields,\n              colIndex = _ref3.colIndex;\n          return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n            groupId: groupId,\n            width: width,\n            fields: fields,\n            colIndex: colIndex,\n            depth: depthIndex,\n            isLastColumn: colIndex === visibleColumns.length - fields.length,\n            extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n            maxDepth: headerToRender.length,\n            height: headerHeight\n          }, groupIndex);\n        })\n      }, depthIndex));\n    });\n    return columns;\n  };\n\n  var rootStyle = {\n    minHeight: totalHeaderHeight,\n    maxHeight: totalHeaderHeight,\n    lineHeight: \"\".concat(headerHeight, \"px\")\n  };\n  return {\n    renderContext: renderContext,\n    getColumnHeaders: getColumnHeaders,\n    getColumnGroupHeaders: getColumnGroupHeaders,\n    isDragging: !!dragCol,\n    getRootProps: function getRootProps() {\n      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        style: rootStyle\n      }, other);\n    },\n    getInnerProps: function getInnerProps() {\n      return {\n        ref: handleInnerRef,\n        role: 'rowgroup'\n      };\n    }\n  };\n};","map":{"version":3,"names":["_extends","React","ReactDOM","useForkRef","styled","defaultMemoize","useGridApiContext","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","gridTabIndexColumnHeaderSelector","gridTabIndexCellSelector","gridFocusColumnHeaderSelector","gridDensityHeaderHeightSelector","gridDensityHeaderGroupingMaxDepthSelector","gridDensityTotalHeaderHeightSelector","gridFilterActiveItemsLookupSelector","gridSortColumnLookupSelector","gridColumnMenuSelector","useGridRootProps","useGridApiEventHandler","GridColumnHeaderItem","getFirstColumnIndexToRender","useGridVisibleRows","getRenderableIndexes","GridColumnGroupHeader","isDeepEqual","jsx","_jsx","MERGE_EMPTY_CELLS","GridColumnHeaderRow","name","slot","overridesResolver","props","styles","columnHeaderRow","display","isUIEvent","event","target","useGridColumnHeaders","innerRefProp","innerRef","minColumnIndex","useState","dragCol","setDragCol","resizeCol","setResizeCol","apiRef","visibleColumns","columnPositions","tabIndexState","cellTabIndexState","columnHeaderFocus","headerHeight","headerGroupingMaxDepth","totalHeaderHeight","filterColumnLookup","sortColumnLookup","columnMenuState","rootProps","useRef","handleInnerRef","renderContext","setRenderContext","prevRenderContext","prevScrollLeft","currentPage","useEffect","current","columnHeadersContainerElementRef","scrollLeft","getFirstColumnIndexToRenderRef","equalityCheck","a","b","every","key","updateInnerPosition","useCallback","nextRenderContext","firstIndex","firstRowIndex","lastIndex","lastRowIndex","minFirstIndex","maxLastIndex","rows","length","buffer","rowBuffer","firstRowToRender","lastRowToRender","firstColumnToRender","firstColumnIndex","columnBuffer","visibleRows","offset","style","transform","useLayoutEffect","handleScroll","left","_prevRenderContext$cu","_prevRenderContext$cu2","lastColumnIndex","canUpdateInnerPosition","flushSync","handleColumnResizeStart","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","getColumnsToRender","minFirstColumn","maxLastColumn","lastColumnToRender","Math","min","renderedColumns","slice","getColumnHeaders","other","columnsToRender","columns","i","column","columnIndex","isFirstColumn","hasTabbableElement","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLastColumn","extendRowFullWidth","disableExtendRowFullWidth","role","children","getParents","path","depth","getColumnGroupHeaders","headerToRender","initialHeader","leftOverflow","firstColumnToRenderGroup","_visibleColumns$first","_visibleColumns$first2","groupPath","firstColumnToRenderGroupParents","_visibleColumns$first3","_visibleColumns$colum","_visibleColumns$colum2","_column$computedWidth","computedWidth","width","_column$computedWidth2","fields","groupId","groupParents","_column$computedWidth3","depthInfo","reduce","aggregated","_column$computedWidth7","lastItem","_column$computedWidth5","_column$computedWidth4","_column$computedWidth6","lastColumnToRenderGroup","_visibleColumns$colum3","_visibleColumns$colum4","_visibleColumns$colum5","_column$computedWidth8","elements","forEach","depthIndex","height","map","groupIndex","maxDepth","rootStyle","minHeight","maxHeight","lineHeight","getRootProps","getInnerProps","ref"],"sources":["C:/Users/rahil/Desktop/dahsboardomar/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector, gridDensityHeaderGroupingMaxDepthSelector, gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { GridColumnGroupHeader } from '../../../components/columnHeaders/GridColumnGroupHeader';\nimport { isDeepEqual } from '../../../utils/utils'; // TODO: add the possibility to switch this value if needed for customization\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MERGE_EMPTY_CELLS = true;\nconst GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (props, styles) => styles.columnHeaderRow\n})(() => ({\n  display: 'flex'\n}));\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);\n  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback(({\n    left,\n    renderContext: nextRenderContext = null\n  }, event) => {\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll); // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n\n  const getColumnsToRender = params => {\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender,\n      minFirstColumn,\n      maxLastColumn\n    };\n  };\n\n  const getColumnHeaders = (params, other = {}) => {\n    const columnsToRender = getColumnsToRender(params);\n\n    if (columnsToRender == null) {\n      return null;\n    }\n\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = columnsToRender;\n    const columns = [];\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      children: columns\n    });\n  };\n\n  const getParents = (path = [], depth) => path.slice(0, depth + 1);\n\n  const getColumnGroupHeaders = params => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n\n    const columnsToRender = getColumnsToRender(params);\n\n    if (columnsToRender == null) {\n      return null;\n    }\n\n    const {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender,\n      maxLastColumn\n    } = columnsToRender;\n    const columns = [];\n    const headerToRender = [];\n\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      var _visibleColumns$first, _visibleColumns$first2, _visibleColumns$first3;\n\n      // Initialize the header line with a grouping item containing all the columns on the left of the virtualization which are in the same group as the first group to render\n      const initialHeader = [];\n      let leftOverflow = 0;\n      let columnIndex = firstColumnToRender - 1;\n      const firstColumnToRenderGroup = (_visibleColumns$first = visibleColumns[firstColumnToRender]) == null ? void 0 : (_visibleColumns$first2 = _visibleColumns$first.groupPath) == null ? void 0 : _visibleColumns$first2[depth]; // The array of parent is used to manage empty grouping cell\n      // When two empty grouping cell are next to each other, we merge them if the belong to the same group.\n\n      const firstColumnToRenderGroupParents = getParents((_visibleColumns$first3 = visibleColumns[firstColumnToRender]) == null ? void 0 : _visibleColumns$first3.groupPath, depth);\n\n      while (firstColumnToRenderGroup !== null && columnIndex >= minColumnIndex && (_visibleColumns$colum = visibleColumns[columnIndex]) != null && _visibleColumns$colum.groupPath && isDeepEqual(getParents((_visibleColumns$colum2 = visibleColumns[columnIndex]) == null ? void 0 : _visibleColumns$colum2.groupPath, depth), firstColumnToRenderGroupParents)) {\n        var _visibleColumns$colum, _visibleColumns$colum2, _column$computedWidth;\n\n        const column = visibleColumns[columnIndex];\n        leftOverflow += (_column$computedWidth = column.computedWidth) != null ? _column$computedWidth : 0;\n\n        if (initialHeader.length === 0) {\n          var _column$computedWidth2;\n\n          initialHeader.push({\n            width: (_column$computedWidth2 = column.computedWidth) != null ? _column$computedWidth2 : 0,\n            fields: [column.field],\n            groupId: firstColumnToRenderGroup,\n            groupParents: firstColumnToRenderGroupParents,\n            colIndex: columnIndex\n          });\n        } else {\n          var _column$computedWidth3;\n\n          initialHeader[0].width += (_column$computedWidth3 = column.computedWidth) != null ? _column$computedWidth3 : 0;\n          initialHeader[0].fields.push(column.field);\n          initialHeader[0].colIndex = columnIndex;\n        }\n\n        columnIndex -= 1;\n      }\n\n      const depthInfo = renderedColumns.reduce((aggregated, column, i) => {\n        var _column$computedWidth7;\n\n        const lastItem = aggregated[aggregated.length - 1];\n\n        if (column.groupPath && column.groupPath.length > depth) {\n          var _column$computedWidth5;\n\n          if (lastItem && lastItem.groupId === column.groupPath[depth]) {\n            var _column$computedWidth4;\n\n            // Merge with the previous columns\n            return [...aggregated.slice(0, aggregated.length - 1), _extends({}, lastItem, {\n              width: lastItem.width + ((_column$computedWidth4 = column.computedWidth) != null ? _column$computedWidth4 : 0),\n              fields: [...lastItem.fields, column.field]\n            })];\n          } // Create a new grouping\n\n\n          return [...aggregated, {\n            groupId: column.groupPath[depth],\n            groupParents: getParents(column.groupPath, depth),\n            width: (_column$computedWidth5 = column.computedWidth) != null ? _column$computedWidth5 : 0,\n            fields: [column.field],\n            colIndex: firstColumnToRender + i\n          }];\n        }\n\n        if (MERGE_EMPTY_CELLS && lastItem && lastItem.groupId === null && isDeepEqual(getParents(column.groupPath, depth), lastItem.groupParents)) {\n          var _column$computedWidth6;\n\n          // We merge with previous column\n          return [...aggregated.slice(0, aggregated.length - 1), _extends({}, lastItem, {\n            width: lastItem.width + ((_column$computedWidth6 = column.computedWidth) != null ? _column$computedWidth6 : 0),\n            fields: [...lastItem.fields, column.field]\n          })];\n        } // We create new empty cell\n\n\n        return [...aggregated, {\n          groupId: null,\n          groupParents: getParents(column.groupPath, depth),\n          width: (_column$computedWidth7 = column.computedWidth) != null ? _column$computedWidth7 : 0,\n          fields: [column.field],\n          colIndex: firstColumnToRender + i\n        }];\n      }, initialHeader);\n      columnIndex = lastColumnToRender;\n      const lastColumnToRenderGroup = depthInfo[depthInfo.length - 1].groupId;\n\n      while (lastColumnToRenderGroup !== null && columnIndex < maxLastColumn && (_visibleColumns$colum3 = visibleColumns[columnIndex]) != null && _visibleColumns$colum3.groupPath && ((_visibleColumns$colum4 = visibleColumns[columnIndex]) == null ? void 0 : (_visibleColumns$colum5 = _visibleColumns$colum4.groupPath) == null ? void 0 : _visibleColumns$colum5[depth]) === lastColumnToRenderGroup) {\n        var _visibleColumns$colum3, _visibleColumns$colum4, _visibleColumns$colum5, _column$computedWidth8;\n\n        const column = visibleColumns[columnIndex];\n        depthInfo[depthInfo.length - 1].width += (_column$computedWidth8 = column.computedWidth) != null ? _column$computedWidth8 : 0;\n        depthInfo[depthInfo.length - 1].fields.push(column.field);\n        columnIndex += 1;\n      }\n\n      headerToRender.push({\n        leftOverflow,\n        elements: [...depthInfo]\n      });\n    }\n\n    headerToRender.forEach((depthInfo, depthIndex) => {\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n        style: {\n          height: `${headerHeight}px`,\n          transform: `translateX(-${depthInfo.leftOverflow}px)`\n        },\n        role: \"row\",\n        \"aria-rowindex\": depthIndex + 1,\n        children: depthInfo.elements.map(({\n          groupId,\n          width,\n          fields,\n          colIndex\n        }, groupIndex) => {\n          return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n            groupId: groupId,\n            width: width,\n            fields: fields,\n            colIndex: colIndex,\n            depth: depthIndex,\n            isLastColumn: colIndex === visibleColumns.length - fields.length,\n            extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n            maxDepth: headerToRender.length,\n            height: headerHeight\n          }, groupIndex);\n        })\n      }, depthIndex));\n    });\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: totalHeaderHeight,\n    maxHeight: totalHeaderHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumnHeaders,\n    getColumnGroupHeaders,\n    isDragging: !!dragCol,\n    getRootProps: (other = {}) => _extends({\n      style: rootStyle\n    }, other),\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}